@using CommsWall.Core.Aggregates.ChatSessionAg;
@using CommsWall.Infrastructure.ChatSessionsScreen.QueryPastConversations.SubTasks;

@using CommsWall.Infrastructure.PluginInterfaces.BrowserStorage;

@using CommsWall.WebApp.Pages.SideViewPages.ChatHistory.MainFilters
@using CommsWall.WebApp.Pages.SideViewPages.ChatHistory.MsgHistoryWindow

@using CommsWall.WebApp.Controls.ChatControls

@inject IQueryPastConversations queryChatHistory

@inject IUserBrowserData browserData

@inject NavigationManager navigationManager

<div class="#" id="members">
    <SearchHistory OnSearch="@HandleSearchHistory"/>

    <HistoryFilters />
 						
    <div class="discussions">
        <h5>@((pastConversations != null && pastConversations.Count() > 0) ? "Chat History" : "No Past Conversations")</h5><hr />
        <div class="list-group" id="chats" role="tablist">
            @if(pastConversations is not null && pastConversations.Count() > 0)
            {
                @foreach(var (targetSession, sessionMetaData) in pastConversations)
                {
                    if (targetSession != null && sessionMetaData != null)
                    {
                        var targetName = sessionMetaData["TargetName"].ToString();
                        var avatarUrl = sessionMetaData["AvatarUrl"].ToString();
                        var sessionId = (int)sessionMetaData["SessionId"];
                        var latestMessage = sessionMetaData["LatestMessage"].ToString();
                        var lastMessageStamp = sessionMetaData["LastMessageStamp"].ToString();
                        <MsgHistoryWindow imageUrl="@avatarUrl"
                                          userName="@targetName"
                                          newMessages="20"
                                          textMessage="@latestMessage"
                                          stringTimeStamp="@lastMessageStamp"
                                          sessionId="@sessionId"
                        OnClick="@StartChatSession" />
                    }
                }
            }
        </div>
    </div>
</div>

@code{
    private int userId { get; set; }

    private List<Tuple<ChatSession, Dictionary<string, object>>> pastConversations { get; set; } = new List<Tuple<ChatSession, Dictionary<string, object>>>();

    private async void DataLoader()
    {
        userId = await browserData.GetLoggedUserIdAsync();
        pastConversations = await queryChatHistory.GetConversationHistory(userId); 
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        DataLoader();
    }

    private void StartChatSession(int sessionId)
    {
        string chatLink = $"chat/session/{sessionId}";
        browserData.SetSessionId(sessionId);
        navigationManager.NavigateTo(chatLink, true);
    }

    private async void HandleSearchHistory(string? filterQuery)
    {
        var chatHistory = await queryChatHistory.GetConversationHistory(userId);
        if (!string.IsNullOrWhiteSpace(filterQuery))
        {
            pastConversations = chatHistory.Where(data => data!.Item2["TargetName"]!.ToString()!.ToLower().Contains(filterQuery!.ToLower())).ToList<Tuple<ChatSession, Dictionary<string, object>>>();
            StateHasChanged();
        }
        else
        {
            pastConversations = chatHistory;
            StateHasChanged();
        }
    }
}
